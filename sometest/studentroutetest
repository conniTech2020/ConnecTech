const express = require('express');
const router = express.Router();
// const gravatar = require('gravatar');
// const bcrypt = require('bcryptjs');
// const jwt = require('jsonwebtoken');


// 
// const { check, validationResult } = require('express-validator');
// 
// const User = require('../../models/User');
// 
// const validationChecks = [
  // check('fullName', 'Full Name is required').not().isEmpty(),
  // check('email', 'Please Include A valid Email').isEmail(),
  // check(
    // 'password',
    // 'Please enter a password with 6 or more characters'
  // ).isLength({ min: 6 }),
  // check('status', 'Status is required').not().isEmpty(),
  // check('skills', 'Please Include at least one skill').not().isEmpty(),
// ];
// 
// const CreatUser = async (req, res) => {
  //split to validateInputFunc
  // const errors = validationResult(req);
  // if (!errors.isEmpty()) {
    // return res.status(400).json({ errors: errors.array() });
  // }
  /////////////////////////////////////////////
  // const {
    // fullName,
    // email,
    // password,
    // status,
    // skills,
    // website,
    // location,
    // githubusername,
  // } = req.body;
// 
  // const userFields = {};
  // const teacherFields = {};
  //required
  // if (fullName) userFields.fullName = fullName;
  // if (email) userFields.email = email;
  // if (password) userFields.password = password;
  // if (status) userFields.status = status;
  // if (skills) userFields.skills = skills;
 // optional
 // if (website) userFields.website = website;
  // if (location) userFields.location = location;
  // if (githubusername) userFields.githubusername = githubusername;
  // if (skills) {
    // userFields.skills = skills.split(',').map((skill) => skill.trim());
  // }
  // try {
    // if (userFields.status === false) {
      // let user = await User.findOne({ email });
      // if (user) {
        // return res
          // .status(400)
          // .json({ errors: [{ msg: 'User already exists' }] });
      // }
      // const avatar = gravatar.url(email, {
        // s: '200',
        // r: 'pg',
        // d: 'mm',
      // });
      // const salt = await bcrypt.genSalt(10);
      // userFields.password = await bcrypt.hash(password, salt);
      // user = new User(userFields);
      // await User.save();
      // const payload = {
        // user: { id: user.id },
      // };
      // split to authenticateUserFunc
      // jwt.sign(
        // payload,
        // process.env.JWT_SECRET,
        // { expiresIn: 36000000000 },
        // (err, token) => {
          // if (err) throw err;
          // res.json({ token });
        // }
      // );
    // }
  //  
  //  
  //  
// 
    ////////////////////////////
  // } catch (err) {
    // console.error(err.message);
    // res.status(500).send('Server Error');
  // }
// };





